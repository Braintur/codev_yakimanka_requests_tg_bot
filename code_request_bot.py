from telebot import TeleBot, types
import sqlite3
from datetime import datetime
now = datetime.now()



token='6709615504:AAHXlUquuFDxZ2RkX5m4CTQN0rru_jM_I60'#6507239473:AAHV3QVbhJmagkAu54pbC5BcSXuydKNGmHc
bot = TeleBot(token)

db = sqlite3.connect('data.db', check_same_thread=False)
sql = db.cursor()

company_name = ''
work_type = ''
workers = ''
work_date = ''
worker_id = ''
id=''
operation_type=1
cars = ''
delivery_or_work = 1
people_or_car = 1
delivery_name = ''
list_of_materials = ''
date_of_work = ''
place_of_work = ''
type_of_work = ''
curator_contact = ''
which_type_of_work=''
delivery_date=''
list_of_materials=''
head_of_workers=''
guest_name = ''
guest_date = ''
guest_phone = ''
guest_car = ''

guard_id='-4064013770'


@bot.message_handler(commands=['start'])
def start(message):
    start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    sm1 = types.KeyboardButton('–ó–∞—è–≤–∫–∞ –Ω–∞ –†–∞–±–æ—Ç—ã')
    sm2 = types.KeyboardButton('–ó–∞—è–≤–∫–∞ –Ω–∞ –î–æ—Å—Ç–∞–≤–∫—É')
    sm3 = types.KeyboardButton('–ü—Ä–æ–ø—É—Å–∫ –¥–ª—è –≥–æ—Å—Ç—è')
    start_markup.add(sm1, sm2, sm3)
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞—è–≤–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å? (–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)', reply_markup=start_markup)
    
@bot.message_handler(content_types=['text'])
def main(message):
    global worker_id, people_or_car
    print(f"[{now.strftime("%d/%m/%Y %H:%M:%S")}][{message.chat.id}] {message.text}")
    if message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –†–∞–±–æ—Ç—ã":
        works(message)
    elif message.text == '–ü—Ä–æ–ø—É—Å–∫ –¥–ª—è –≥–æ—Å—Ç—è':
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–≤—å—Ç–µ –§–ò–û –≥–æ—Å—Ç—è")
        bot.register_next_step_handler(message, get_guest_name)
    elif message.text == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –†–∞–±–æ—Ç—ã":
        people_or_car = 1
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
        bot.register_next_step_handler(message, get_company_name)
    elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É":
        people_or_car = 2
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
        bot.register_next_step_handler(message, get_company_name)
    elif message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –î–æ—Å—Ç–∞–≤–∫—É":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
        bot.register_next_step_handler(message, get_company_delivery_name)
    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' and operation_type == 1:
        bot.send_message(message.chat.id, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
        write_to_db(message)
    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' and operation_type == 2:
        worker_id = message.chat.id
        bot.send_message(message.chat.id, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
        write_to_db(message)
    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' and operation_type == 3:
        worker_id = message.chat.id
        sql.execute(f"SELECT * FROM requests_for_work_from_{worker_id}")
        data = sql.fetchall()
        message_to_send = f"–ö–æ–º–ø–∞–Ω–∏—è: {data[id][1]}\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {work_date}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {data[id][3]}\n–í–∏–¥ —Ä–∞–±–æ—Ç: {data[id][4]}\n–†–∞–±–æ—Ç–Ω–∏–∫–∏: {data[id][5]}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {data[id][6]} \n–ú–∞—à–∏–Ω—ã: {data[id][7]}\n–ö—É—Ä–∞—Ç–æ—Ä codevelopment: {data[id][8]}"
        bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã üèóÔ∏è</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data[id][1]}
<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:</b> {work_date}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> {data[id][3]}
<b>–í–∏–¥ —Ä–∞–±–æ—Ç:</b> {data[id][4]}
<b>–†–∞–±–æ—Ç–Ω–∏–∫–∏:</b> {data[id][5]}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–∞—Ä—Ç—É:</b> {data[id][6]}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {data[id][7]}
<b>–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç CODE:</b> {data[id][8]}''', parse_mode='html')
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' and operation_type == 4:
        bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Ç—èüü†</b>
<b>–§–ò–û:</b> {guest_name}
<b>–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞:</b> {guest_date}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {guest_phone}
<b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ:</b> {guest_car}''', parse_mode='html')
        bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    elif message.text == '–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É' and operation_type == 1:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
        bot.register_next_step_handler(message, get_company_delivery_name)
    elif message.text == '–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É' and operation_type == 2:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏')
        bot.register_next_step_handler(message, get_company_name)
    elif message.text == '–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É' and operation_type == 3:
        old_request(message)
    elif message.text == '–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É' and operation_type == 4:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–≤—å—Ç–µ –§–ò–û –≥–æ—Å—Ç—è")
        bot.register_next_step_handler(message, get_guest_name)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π':
        old_request(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        start(message)

def get_guest_name(message):
    global guest_name
    guest_name = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—Ö–æ–¥–∞ –≥–æ—Å—Ç—è")
    bot.register_next_step_handler(message, get_guest_date)

def get_guest_date(message):
    global guest_date
    guest_date = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≥–æ—Å—Ç—è")
    bot.register_next_step_handler(message, get_guest_phone)
    
def get_guest_phone(message):
    global guest_phone
    guest_phone = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –≥–æ—Å—Ç—è (Ford Focus A153AAA197)")
    bot.register_next_step_handler(message, get_guest_car)
    
def get_guest_car(message):
    global guest_car, operation_type
    guest_car = message.text
    operation_type = 4
    bot.send_message(message.chat.id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≥–æ—Å—Ç—èüü†</b>
<b>–§–ò–û:</b> {guest_name}
<b>–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞:</b> {guest_date}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {guest_phone}
<b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ:</b> {guest_car}''', parse_mode='html')
    conf_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cm1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    cm2 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É')
    cm3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    conf_markup.add(cm1, cm2, cm3)
    bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏', reply_markup=conf_markup)

def old_request(message):
    
    worker_id = message.chat.id
    print(worker_id)
    sql.execute(f"SELECT * FROM requests_for_work_from_{worker_id}")
    data = sql.fetchall()
    k=1
    for i in range(len(data)):

        print(len(data))
        message_to_send = f"{str(k)}.\n–ö–æ–º–ø–∞–Ω–∏—è: {data[i][1]}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {data[i][3]}\n–í–∏–¥ —Ä–∞–±–æ—Ç: {data[i][4]}\n–†–∞–±–æ—Ç–Ω–∏–∫–∏: {data[i][5]}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {data[i][6]} \n–ú–∞—à–∏–Ω—ã: {data[i][7]}\n–ö—É—Ä–∞—Ç–æ—Ä codevelopment: {data[i][8]}"
        bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã üèóÔ∏è</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data[i][1]}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> {data[i][3]}
<b>–í–∏–¥ —Ä–∞–±–æ—Ç:</b> {data[i][4]}
<b>–†–∞–±–æ—Ç–Ω–∏–∫–∏:</b> {data[i][5]}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–∞—Ä—Ç—É:</b> {data[i][6]}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {data[i][7]}
<b>–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç CODE:</b> {data[i][8]}''', parse_mode='html')
        k+=1
    bot.register_next_step_handler(message, request_resend_id)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)')

def works(message):
    global delivery_or_work
    delivery_or_work = 2
    works_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    wm1 = types.KeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –†–∞–±–æ—Ç—ã')
    wm2 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π')
    wm3 =  types.KeyboardButton('–ù–∞–∑–∞–¥')
    works_markup.add(wm1, wm2, wm3)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=works_markup)


def request_resend_id(message):
    global id
    id=message.text
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2021')
    bot.register_next_step_handler(message, request_resend_date)

def request_resend_date(message):
    global operation_type, id, work_date
    worker_id = message.chat.id
    sql.execute(f"SELECT * FROM requests_for_work_from_{worker_id}")
    data = sql.fetchall()
    print(data)
    try:
        id = int(id)-1
        work_date = message.text
        message_to_send = f"–ö–æ–º–ø–∞–Ω–∏—è: {data[id][1]}\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {work_date}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {data[id][3]}\n–í–∏–¥ —Ä–∞–±–æ—Ç: {data[id][4]}\n–†–∞–±–æ—Ç–Ω–∏–∫–∏: {data[id][5]}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {data[id][6]} \n–ú–∞—à–∏–Ω—ã: {data[id][7]}\n–ö—É—Ä–∞—Ç–æ—Ä codevelopment: {data[id][8]}"
    except:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, request_resend_id)
        old_request(message)
        exit()
    work_date = message.text
    message_to_send = f"–ö–æ–º–ø–∞–Ω–∏—è: {data[id][1]}\n–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {work_date}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {data[id][3]}\n–í–∏–¥ —Ä–∞–±–æ—Ç: {data[id][4]}\n–†–∞–±–æ—Ç–Ω–∏–∫–∏: {data[id][5]}\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {data[id][6]} \n–ú–∞—à–∏–Ω—ã: {data[id][7]}\n–ö—É—Ä–∞—Ç–æ—Ä codevelopment: {data[id][8]}"
    bot.send_message(message.chat.id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã üèóÔ∏è</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data[id][1]}
<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:</b> {work_date}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> {data[id][3]}
<b>–í–∏–¥ —Ä–∞–±–æ—Ç:</b> {data[id][4]}
<b>–†–∞–±–æ—Ç–Ω–∏–∫–∏:</b> {data[id][5]}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–∞—Ä—Ç—É:</b> {data[id][6]}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {data[id][7]}
<b>–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç CODE:</b> {data[id][8]}''', parse_mode='html')
    operation_type=3
    conf_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cm1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    cm2 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É')
    cm3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    conf_markup.add(cm1, cm2, cm3)
    bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏', reply_markup=conf_markup)
    

def get_company_name(message):
    global company_name
    company_name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2021)')
    bot.register_next_step_handler(message, get_date_of_work)
    
def get_date_of_work(message):
    global date_of_work
    date_of_work = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç')
    bot.register_next_step_handler(message, get_place_of_work)
    
def get_place_of_work(message):
    global place_of_work
    place_of_work = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç')
    bot.register_next_step_handler(message, get_type_of_work)
    
def get_type_of_work(message):
    global type_of_work
    type_of_work = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∞–ª—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò., –ü–µ—Ç—Ä–æ–≤ –ü.–ü.)')
    bot.register_next_step_handler(message, get_workers)
    
def get_workers(message):
    global workers
    workers = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∫–∞—Ä—Ç—É')
    bot.register_next_step_handler(message, get_head_of_workers)

def get_head_of_workers(message):
    global head_of_workers
    head_of_workers = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Ford Focus –ê123–ê–ê999, Toyota Camry –í123–í–í998)')
    bot.register_next_step_handler(message, get_cars)

def get_cars(message):
    global cars
    cars = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç codevelopment —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–ª–∏ —Ä–∞–±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞—Ñ–∞—Ä, –ì–∞—Ä–µ–≥–∏–Ω, –ê–Ω–¥—Ä–µ–π –∏ —Ç.–¥.)')
    bot.register_next_step_handler(message, get_curator_contact)
    
def get_curator_contact(message):
    global curator_contact, operation_type, worker_id
    worker_id = message.chat.id
    operation_type = 2
    curator_contact = message.text
    bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã üèóÔ∏è</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}
<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:</b> {date_of_work}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> {place_of_work}
<b>–í–∏–¥ —Ä–∞–±–æ—Ç:</b> {type_of_work}
<b>–†–∞–±–æ—Ç–Ω–∏–∫–∏:</b> {workers}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–∞—Ä—Ç—É:</b> {head_of_workers}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {cars}
<b>–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç CODE:</b> {curator_contact}''', parse_mode='html')
    conf_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cm1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    cm2 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É')
    cm3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    conf_markup.add(cm1, cm2, cm3)
    bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏', reply_markup=conf_markup)

def get_company_delivery_name(message):
    global company_name
    company_name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2021)')
    bot.register_next_step_handler(message, get_delivery_date)

def get_delivery_date(message):
    global delivery_date
    delivery_date = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
    bot.register_next_step_handler(message, get_list_of_materials)
    
def get_list_of_materials(message):
    global list_of_materials
    list_of_materials = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç –Ω—É–∂–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
    bot.register_next_step_handler(message, get_which_type_of_work)
    
def get_which_type_of_work(message):
    global which_type_of_work
    which_type_of_work = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
    bot.register_next_step_handler(message, get_head_of_workers_del)

def get_head_of_workers_del(message):
    global head_of_workers
    head_of_workers = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Ford Focus –ê123–ê–ê999, Toyota Camry –í123–í–í999)')
    bot.register_next_step_handler(message, get_del_cars)
    
def get_del_cars(message):
    global cars, operation_type, delivery_or_work, worker_id
    worker_id = message.chat.id
    cars = message.text
    operation_type = 1
    delivery_or_work = 1
    conf_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cm1 = types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
    cm2 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑—è–≤–∫—É')
    cm3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    conf_markup.add(cm1, cm2, cm3)
    bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏', reply_markup=conf_markup)
    bot.send_message(message.chat.id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É üì¶</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}
<b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date}
<b>–ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b> {list_of_materials}
<b>–î–ª—è –∫–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç –Ω—É–∂–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {which_type_of_work}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b> {head_of_workers}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {cars}''', parse_mode='html')
    

def write_to_db(message):
    global delivery_or_work, worker_id

    if delivery_or_work == 1:
        delivery_or_work = '–î–æ—Å—Ç–∞–≤–∫–∞'
        bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É üì¶</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}
<b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date}
<b>–ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b> {list_of_materials}
<b>–î–ª—è –∫–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç –Ω—É–∂–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {which_type_of_work}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b> {head_of_workers}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {cars}''', parse_mode='html')
    elif delivery_or_work == 2:
        delivery_or_work = '–†–∞–±–æ—Ç—ã'
        sql.execute(f"""CREATE TABLE IF NOT EXISTS requests_for_work_from_{worker_id} (
        request_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        company_name TEXT NOT NULL,
        work_date TEXT NOT NULL,
        place_of_work TEXT NOT NULL,
        type_of_work TEXT NOT NULL,
        workers TEXT NOT NULL,
        head_of_workers TEXT NOT NULL,
        cars TEXT NOT NULL,
        contacts TEXT NOT NULL
        )""")
        db.commit()
        sql.execute(f"INSERT INTO requests_for_work_from_{worker_id} VALUES (?,?,?,?,?,?,?,?,?)", (None, company_name, work_date, place_of_work, type_of_work, workers, head_of_workers, cars, curator_contact))
        db.commit()
        bot.send_message(guard_id, f'''<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—ã üèóÔ∏è</b>
<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}
<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç:</b> {date_of_work}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> {place_of_work}
<b>–í–∏–¥ —Ä–∞–±–æ—Ç:</b> {type_of_work}
<b>–†–∞–±–æ—Ç–Ω–∏–∫–∏:</b> {workers}
<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–∞—Ä—Ç—É:</b> {head_of_workers}
<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {cars}
<b>–ö—É—Ä–∞—Ç–æ—Ä –æ—Ç CODE:</b> {curator_contact}''', parse_mode='html')
    else:
        delivery_or_work = '–ì–æ—Å—Ç–∏'

bot.polling(non_stop=True)